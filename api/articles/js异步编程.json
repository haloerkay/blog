{"title":"js异步编程","uid":"d3e5941394e4ad3a2ef49c227f52e4fe","slug":"js异步编程","date":"2022-09-14T16:00:00.000Z","updated":"2022-09-17T08:08:49.379Z","comments":true,"path":"api/articles/js异步编程.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/20200815152729473.png","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>JavaScript语言的执行环境是<strong>单线程</strong>的，也就是说一次只能完成一个任务，完成前面一个任务后，再去执行下一个任务。</p>\n<p>虽然这种模式不像多线程那么复杂，但是如果执行的一个任务耗时很长，那么就会造成阻塞，无法执行后面的任务，进而影响用户的体验。</p>\n<p>为了解决这个问题，JS把任务的执行模式分为<strong>异步和同步</strong>两种</p>\n<p>为了区别同步和异步，这里举一个生活中的例子</p>\n<p>假如要完成洗衣服和拖地这两项任务，</p>\n<p>同步：把衣服放进洗衣机处理好后，一直在旁边等待，直到洗完衣服并晾晒后，再去拖地</p>\n<p>异步：把衣服放进洗衣机处理好后，就去拖地，拖完地后再来处理洗完的衣服。</p>\n<p>这样的说法可能并不是很严谨，接下来会在事件循环部分中具体介绍</p>\n<h2 id=\"异步场景\"><a href=\"#异步场景\" class=\"headerlink\" title=\"异步场景\"></a>异步场景</h2><p>详细介绍异步之前，先来回顾下日常用到异步的场景</p>\n<ul>\n<li><p>ajax请求</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 处理逻辑</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>读取文件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//  处理逻辑</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>定时器</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">setTimeOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//\t处理逻辑</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>发布订阅、Promise等等</p>\n</li>\n</ul>\n<p>可以说前端项目中，几乎离不开异步任务</p>\n<h2 id=\"事件循环\"><a href=\"#事件循环\" class=\"headerlink\" title=\"事件循环\"></a>事件循环</h2><p>先来看一张图</p>\n<p><img src=\"C:\\Users\\haloerkay\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220916191208680.png\" alt=\"image-20220916191208680\"></p>\n<p>先来一步步解读：</p>\n<ul>\n<li><p>同步和异步任务分别进入不同的执行”场所”，同步的进入主线程，异步的进入Event Table并注册函数</p>\n</li>\n<li><p>当指定的事情完成时，Event Table会将这个函数移入Event Queue。</p>\n</li>\n<li><p>主线程内的任务执行完毕为空后，会去Event Queue读取对应的函数，进入主线程执行。</p>\n</li>\n<li><p>上述过程会不断重复，也就是常说的Event Loop(事件循环)</p>\n</li>\n</ul>\n<p>直接上理论可能不够明显，再通过一个例子来解释</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n$<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span>www<span class=\"token punctuation\">.</span>javascript<span class=\"token punctuation\">.</span>com<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span>data<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'发送成功!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'代码执行结束'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面是一段简易的ajax请求代码：</p>\n<ul>\n<li>ajax进入Event Table，注册回调函数success。</li>\n<li>执行console.log(‘代码执行结束’)。</li>\n<li>ajax事件完成，回调函数success进入Event Queue。</li>\n<li>主线程从Event Queue读取回调函数success并执行。</li>\n</ul>\n<p>借助这个例子，瞬间就清晰多了</p>\n<h3 id=\"宏任务-微任务\"><a href=\"#宏任务-微任务\" class=\"headerlink\" title=\"宏任务 微任务\"></a>宏任务 微任务</h3><p>宏任务和微任务都属于异步任务，但是他们执行的先后顺序有所不同</p>\n<p><img src=\"C:\\Users\\haloerkay\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220916192845041.png\" alt=\"image-20220916192845041\"></p>\n<p>js异步中，遇到宏任务，先执行宏任务，将宏任务放入Event Queue中，然后再执行微任务，将微任务放入Event Queue。但是，这两个Event Queue并不是同一个Queue,当往外拿的时候，先拿出微任务，再拿出宏任务。</p>\n<p>常见的宏任务：setTimeout，setInterval、setImmediate。</p>\n<p>常见的微任务：原生Promise(有些实现的promise将then方法放到了宏任务中)、process.nextTick、Object.observe(已废弃)、 MutationObserver</p>\n<p>看完上面的介绍，来看段代码</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script start'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'setTimeout'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script end'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出结果为script start, script end, promise1, promise2, setTimeout </p>\n<p>前两个输出都是同步任务，故最先输出</p>\n<p>后面三个输出，有宏任务和微任务之分，故promise1和promise2在setTimeout之前</p>\n<h3 id=\"setTimeout-x3D-gt-0-分析\"><a href=\"#setTimeout-x3D-gt-0-分析\" class=\"headerlink\" title=\"setTimeout(()&#x3D;&gt;{},0)分析\"></a>setTimeout(()&#x3D;&gt;{},0)分析</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'111'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"222\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出为：222  111</p>\n<p>console.log(‘111’)进入Event Table并注册，计时开始</p>\n<p>执行console.log(‘222’)</p>\n<p>console.log(‘111’)进入Event Queue，查看主线程是否为空</p>\n<p>主线程任务执行完毕，执行Event Queue中的任务console.log(‘111’)</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>所以说，<strong>setTimeout这个函数，是经过指定时间后，把要执行的任务加入到Event Queue中</strong></p>\n<p>注：HTML5标准规定了setTimeout的第二个参数的最小值（最短间隔），不得低于4毫秒</p></blockquote>\n","text":"前言JavaScript语言的执行环境是...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"前端","slug":"前端","count":3,"path":"api/categories/前端.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":3,"path":"api/tags/JavaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%82%E6%AD%A5%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">异步场景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">事件循环</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%8F%E4%BB%BB%E5%8A%A1-%E5%BE%AE%E4%BB%BB%E5%8A%A1\"><span class=\"toc-text\">宏任务 微任务</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#setTimeout-x3D-gt-0-%E5%88%86%E6%9E%90\"><span class=\"toc-text\">setTimeout(()&#x3D;&gt;{},0)分析</span></a></li></ol></li></ol>","author":{"name":"haloerkay","slug":"blog-author","avatar":"https://scpic.chinaz.net/files/pic/pic9/201803/wpic078.jpg","link":"/","description":"记录学习 & 生活","socials":{"github":"https://github.com/haloerkay","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/317105286168254","customs":{}}},"mapped":true,"prev_post":{"title":"快速了解this指针","uid":"397589cbdfc7b4478e47c07e988fa160","slug":"快速了解this指针","date":"2022-09-14T16:00:00.000Z","updated":"2022-09-16T12:21:24.461Z","comments":true,"path":"api/articles/快速了解this指针.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/20200815152729473.png","text":"前言先说下结论 在ES5及以前中，thi...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"前端","slug":"前端","count":3,"path":"api/categories/前端.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":3,"path":"api/tags/JavaScript.json"}],"author":{"name":"haloerkay","slug":"blog-author","avatar":"https://scpic.chinaz.net/files/pic/pic9/201803/wpic078.jpg","link":"/","description":"记录学习 & 生活","socials":{"github":"https://github.com/haloerkay","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/317105286168254","customs":{}}}},"next_post":{}}